//description.txt - a brief project explanation

Welcome to my Weather Forecast application! 

This is a project I developed using HTML, CSS, and JavaScript, 

which leverages the open weather app API to provide users with up-to-date weather information for their desired location.

Through the integration of this API, my application is able to provide accurate and reliable weather forecasts, showcasing 

my ability to integrate third-party APIs into my projects.

I developed this application to showcase my skills as a web developer, and to provide a useful and practical tool for individuals 

seeking up-to-date weather information. The application is designed with a simple and user-friendly interface, allowing users to 

quickly and easily access the information they need. I take pride in my work, and am committed to delivering high-quality products 

that exceed expectations. I believe that this project demonstrates my ability to develop complex and sophisticated web applications, 

while still maintaining a focus on usability and user experience.

Thank you for taking the time to review my project, and I look forward to hearing from you soon.


//Contact Information:

Email: aarnavsingh836@gmail.com

Phone: 612-842-6315

//app.js - an brief logic explanation

This is a JavaScript file that handles the API request and updates the HTML content of the weather section based on the response from the API.

The API key is stored as a constant variable named API_KEY. It is used to authenticate the API request and is passed as a parameter in the fetch() method.

The code also selects the form and input elements from the HTML page using the querySelector() method and listens for the "submit" event on the form element using the addEventListener() method.

When the form is submitted, the function inside the event listener is executed. The function first prevents the default form submission behavior using preventDefault().

Then, it gets the value entered in the input field and trims it to remove any leading or trailing whitespace.

Next, it uses the fetch() method to make a request to the OpenWeather API, passing in the city name and API key as parameters in the URL.

When the API response is received, the function converts the response data to JSON format using the .json() method and then logs it to the console for debugging purposes.

The function then extracts the relevant weather data from the API response and inserts it into the HTML content of the weather container using template literals and the innerHTML property of the weatherContainer element.

If there is an error in retrieving the weather data, the function catches the error and logs it to the console, and updates the HTML content of the weather container with an error message.
